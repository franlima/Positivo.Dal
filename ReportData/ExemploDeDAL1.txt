  using System;
  using System.Collections.Generic;
  using System.Linq;
  using System.Text;
  using System.Data.Common;
  using System.Data;
  using System.Data.SqlClient;
  using System.Configuration;
   
  namespace FrameworkDevmedia.DAL
  {
      public class DataAccess 
      {
          #region Objetos Estáticos
          // Objeto Connection para obter acesso ao SQL Server
          public static SqlConnection sqlconnection = new SqlConnection();
          // Objeto SqlCommand para executar os com
          public static SqlCommand comando = new SqlCommand();
          // Objeto SqlParameter para adicionar os parâmetros necessários em nossas consultas
          public static SqlParameter parametro = new SqlParameter();
          #endregion
   
          #region Obter SqlConnection
          public static SqlConnection connection()
          {
              try
              {
                  // Obtemos os dados da conexão existentes no WebConfig utilizando o ConfigurationManager
                  string dadosConexao = ConfigurationManager.ConnectionStrings["NomeDaConnectionString"].ConnectionString;
                  // Instanciando o objeto SqlConnection
                  sqlconnection = new SqlConnection(dadosConexao);
                  //Verifica se a conexão esta fechada.
                  if (sqlconnection.State == ConnectionState.Closed)
                  {
                      //Abre a conexão.
                      sqlconnection.Open();
                  }
                  //Retorna o sqlconnection.              
                  return sqlconnection;
              }
              catch (SqlException ex)
              {
                  throw ex;
              }
          }
          #endregion
   
          #region Abre Conexão
          public void Open()
          {
              sqlconnection.Open();
          }
          #endregion
   
          #region Fecha Conexão
          public void Close()
          {
              sqlconnection.Close();
          }
          #endregion
   
          #region Adiciona Parâmetros 
          public void AdicionarParametro(string nome, SqlDbType tipo, int tamanho, object valor)
          {
              // Cria a instância do Parâmetro e adiciona os valores
              parametro = new SqlParameter();
              parametro.ParameterName = nome;
              parametro.SqlDbType = tipo;
              parametro.Size = tamanho;
              parametro.Value = valor;
              // Adiciona ao comando SQL o parâmetro
              comando.Parameters.Add(parametro);
          }
          #endregion
   
          #region Adiciona Parâmetros
          public void AdicionarParametro(string nome, SqlDbType tipo, object valor)
          {
              // Cria a instância do Parâmetro e adiciona os valores
              SqlParameter parametro = new SqlParameter();
              parametro.ParameterName = nome;
              parametro.SqlDbType = tipo;
              parametro.Value = valor;
              // Adiciona ao comando SQL o parâmetro
              comando.Parameters.Add(parametro);
          }
          #endregion
   
          #region Remove os parâmetros 
          public void RemoverParametro(string pNome)
          {
              // Verifica se existe o parâmetro
              if (comando.Parameters.Contains(pNome))
                  // Se exite remove o mesmo
                  comando.Parameters.Remove(pNome);
          }
          #endregion
   
          #region Limpar Parâmetros
          public void LimparParametros()
          {
              comando.Parameters.Clear();
          }
          #endregion
   
          #region Executar Consulta SQL
          public DataTable ExecutaConsulta(string sql)
          {
              try
              {
                  // Pega conexão com a base SQL Server
                  comando.Connection = connection();
                  // Adiciona a instrução SQL
                  comando.CommandText = sql;
                  //Executa a query sql.
                  comando.ExecuteScalar();
                  // Ler os dados e passa para um DataTable
                  IDataReader dtreader = comando.ExecuteReader();
                  DataTable dtresult = new DataTable();
                  dtresult.Load(dtreader);
                  // Fecha a conexão
                  sqlconnection.Close();
                  // Retorna o DataTable com os dados da consulta
                  return dtresult;
              }
              catch (Exception ex)
              {
                  // Retorna uma exceção simples que pode ser tratada por parte do desenvolvedor
                 // Exemplo: if (ex.Message.toString().Contains(‘Networkig’)) 
                                                 // Exemplo throw new Exception(‘Problema de rede detectado’);                        
                  throw ex;
              }
          }
          #endregion       
   
          #region Executa uma instrução SQL: INSERT, UPDATE e DELETE
          public int ExecutaAtualizacao(string sql)
          {
              try
              {
                  //Instância o sqlcommand com a query sql que será executada e a conexão.
                  //comando = new SqlCommand(sql, connection());
                  comando.Connection = connection();
                  comando.CommandText = sql;
                  //Executa a query sql.
                  int result = comando.ExecuteNonQuery();
                  sqlconnection.Close();
                  // Retorna a quantidade de linhas afetadas
                  return result;
              }
              catch (Exception ex)
              {
                  // Retorna uma exceção simples que pode ser tratada por parte do desenvolvedor
                  throw ex;
              }
          }
          #endregion
      }
  } 
Com nossa classe criada fica simples consumir a mesma em nossos projetos.

Para fazer uso dela precisaremos antes de tudo instanciar a nossa classe criada para conseguir efetuar a chamada dos métodos existentes usando o seguinte exemplo:

  NomeDaClasse instaciaDaClasse = new NomeDaClasse();
 Cliente cli = new Cliente();
 instaciaDaClasse.InserirCliente(cli);
  
Listagem 2. Efetuando uma consulta com a classe de dados encapsulada

     public DataTable EfetuarConsultaPorCodigo(int codigo)
          {
              // Limpando parãmetros existentes
              query.LimparParametros();
              string SQL = @" SELECT
                                           c.NR_MATRICULA,
                                           c.DS_NOMECLIENTE AS NOME,
                                             c.DS_ESTADO AS ESTADO,
                                             c.DS_CIDADE AS CIDADE,
                                             c.DS_ENDERECO AS ENDERECO,
                                            c.DT_NASCIMENTO 
  FROM CLIENTES c WHERE c.NR_MATRICULA = @ NR_MATRICULA ";
              // Adicionando o parâmetro para filtrar pelo código
              query.AdicionarParametro("@NR_MATRICULA ", SqlDbType.Int, codigo);
              // Retorna um DataTable com os dados da consulta
              return query.ExecutaConsulta(SQL);
          } 
Na Listagem 2 podemos ver de forma simples e organizada como obter os dados a partir de uma consulta SQL, tendo esses dados em um objeto DataTable para manipularmos de forma simples.

Listagem 3. Efetuando Insert com a classe de dados encapsulada

      public bool InserirCliente(Cliente cliente)
          {
              // Limpa os parâmetros existente
              query.LimparParametros();
              string SQL = @"INSERT INTO CLIENTE
                              (NOME, DT_NASCIMENTO, NR_MATRICULA, DS_ENDERECO)
                              VALUES
                              (@NOME,@DT_NASCIMENTO,@NR_MATRICULA, @DS_ENDERECO)";
              // Adiciona os parâmetros da instrução SQL
              query.AdicionarParametro("@NOME", SqlDbType.VarChar, cliente.Nome);
              query.AdicionarParametro("@DT_NASCIMENTO", SqlDbType.DateTime, cliente.Data_nasc);
              query.AdicionarParametro("@NR_MATRICULA", SqlDbType.Int, cliente.Matricula);
              query.AdicionarParametro("@DS_ENDERECO", SqlDbType.Varchar, cliente.Endereco);
              // Retorna a quantidade de linhas afetadas
              return (query.ExecutaAtualizacao(SQL) > 0);
          }
Na Listagem 3 efetuamos um INSERT na nossa base de dados utilizando os métodos da nossa classe. O método ExecutaAtualizacao retorna a quantidade de linhas afetadas, assim temos como saber se realmente nossa informação foi gravada com sucesso ou não na nossa base de dados.

Listagem 4. Efetuando um DELETE com a classe de dados encapsulada

  public bool ExcluirCliente(int nrMatricula)
          {
              query.LimparParametros();
              string SQL = @"DELETE FROM CLIENTE WHERE NR_MATRICULA = @NR_MATRICULA";
              query.AdicionarParametro("@NR_MATRICULA", SqlDbType.Int,nrMatricula);
              if (query.ExecutaAtualizacao(SQL) > 0)
                  return true;
              return false;
          }
Na Listagem 4 efetuamos um DELETE na nossa base de dados fazendo de forma parecida com o método anterior para verificar se o registro foi realmente excluído.

Listagem 5. Obtendo um objeto com informações com a classe de dados encapsulada

  public Cliente ObterDadosCliente(int nrMatricula)
          {
              // Limpando os parãmetros
              query.LimparParametros();
              string SQL = @"SELECT
                                           c.NR_MATRICULA,
                                           c.DS_NOMECLIENTE AS NOME,
                                             c.DS_ESTADO AS ESTADO,
                                             c.DS_CIDADE AS CIDADE,
                                             c.DS_ENDERECO AS ENDERECO,
                                            c.DT_NASCIMENTO
                              FROM CLIENTE c
                              WHERE c.NR_MATRICULA = @INR_MATRICULA";
              // Adicionando novos parâmetros
              query.AdicionarParametro("@NR_MATRICULA", SqlDbType.Int, nrMatricula);
              // Obtendo um DataTable com as informações
              DataTable dtResult = query.ExecutaConsulta(SQL);
              // Preenchendo os dados do objeto
              Cliente cliente = new Cliente();
              cliente.nrMatricula = Convert.ToInt32(dtResult.Rows[0]["NR_MATRICULA"].ToString());
              cliente.Nome = dtResult.Rows[0]["NOME"].ToString();
              cliente.Estado = dtResult.Rows[0]["ESTADO"].ToString();
              cliente.Cidade = dtResult.Rows[0]["CIDADE"].ToString();
              cliente.Endereco = dtResult.Rows[0][" DS_ENDERECO "].ToString();           
              // Retornando o objeto com as informações carregadas da base de dados
              return cliente;
          }
Na Listagem 5 demonstramos como obter um objeto com as informações preenchidas, obtidas da nossa base de dados.

Listagem 6. Atualizando registros com a classe de dados encapsulada

  public bool AlterarCliente(Cliente cliente)
          {
              // Limpando os parâmetros
              query.LimparParametros();
              string SQL = @"UPDATE CLIENTE SET
                              DS_NOMECLIENTE = @ DS_NOMECLIENTE,
                              DS_ENDERECO = @ DS_ENDERECO,
                             DT_NASCIMENTO = @ DT_NASCIMENTO,
                              WHERE NR_MATRICULA = @NR_MATRICULA ";
              // Adicionando novos parâmetros
             query.AdicionarParametro("@NR_MATRICULA ", SqlDbType.Int, cliente.NrMatricula);
              query.AdicionarParametro("@DS_NOMECLIENTE ", SqlDbType.Varchar, cliente.NomeCliente);
              query.AdicionarParametro("@DT_NASCIMENTO ", SqlDbType.DateTime, cliente.DataNascimento);
              query.AdicionarParametro("@DS_ENDERECO", SqlDbType.Varchar, cliente.Endereco);
              // Executando a atualização na base verificando se o update executou com sucesso
              if (query.ExecutaAtualizacao(SQL) > 0)
                  return true;
              return false;
          }
